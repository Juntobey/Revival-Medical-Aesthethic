services:

  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ehrdb
    volumes:
      - ./authentication/database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - rabbitmq_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 20s  # Interval between health checks
      timeout: 20s  # Timeout for each check
      retries: 5  # Retry attempts before failing
      start_period: 30s  # Time RabbitMQ is allowed to start before checks begin      
    networks:
      - rabbitmq_network

  authentication:
    build: ./services/authentication
    ports:
      - "3035:3035"
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ehrdb
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ to be healthy before starting the app
    volumes:
    - .:/app
    networks:
      - rabbitmq_network

  appointments:
    build: ./services/appointments
    ports:
      - "3036:3036"
    environment:
      - NODE_ENV=development
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ehrdb
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy  # Wait for RabbitMQ to be healthy before starting the app
    volumes:
    - .:/app
    networks:
      - rabbitmq_network

networks:
  rabbitmq_network:
    driver: bridge

volumes:
  pgdata: